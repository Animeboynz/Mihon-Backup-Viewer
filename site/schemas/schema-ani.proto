syntax = "proto2";

enum UpdateStrategy {
  ALWAYS_UPDATE = 0;
  ONLY_FETCH_ONCE = 1;
}

message PreferenceValue {
  required string type = 1;
  required bytes truevalue = 2;
}

// Backup.kt
message Backup {
  repeated BackupAnime backupManga = 3;
  repeated BackupAnimeCategory backupCategories = 4;
  repeated BrokenBackupAnimeSource backupBrokenSources = 102;
  repeated BackupAnimeSource backupSources = 103;
  repeated BackupPreference backupPreferences = 104;
  repeated BackupExtensionPreference backupSourcePreferences = 105;
  repeated BackupExtension backupExtensions = 106;
}

//BackupAnime.kt
message BackupAnime {
    required int64 source = 1;
    required string url = 2;
    required string title = 3 [default = ""];
    optional string artist = 4;
    optional string author = 5;
    optional string description = 6;
    repeated string genre = 7;
    optional int32 status = 8 [default = 0];
    optional string thumbnailUrl = 9;
    optional int64 dateAdded = 13 [default = 0];
    repeated BackupEpisode chapters = 16;
    repeated int64 categories = 17;
    repeated BackupAnimeTracking tracking = 18;
    optional bool favorite = 100 [default = true];
    optional int32 episodeFlags = 101 [default = 0];
    repeated BrokenBackupAnimeHistory brokenHistory = 102;
    optional int32 viewer_flags = 103 [default = 0];
    repeated BackupAnimeHistory history = 104;
    optional UpdateStrategy updateStrategy = 105 [default = ALWAYS_UPDATE];
    optional int64 lastModifiedAt = 106 [default = 0];
    optional int64 favoriteModifiedAt = 107;
    optional int64 version = 108 [default = 0];
    optional int32 customStatus = 200 [default = 0];
    optional string customTitle = 201;
    optional string customArtist = 202;
    optional string customAuthor = 203;
    optional string customDescription = 204;
    repeated string customGenre = 205;
}

// BackupAnimeHistory.kt
message BrokenBackupAnimeHistory {
    required string url = 0;
    required int64 lastSeen = 1;
}

message BackupAnimeHistory {
    required string url = 1;
    required int64 lastRead = 2;
    optional int64 readDuration = 3 [default = 0];
}

// BackupAnimeSource.kt
message BackupAnimeSource {
    required string name = 1 [default = ""];
    required int64 sourceId = 2;
}

message BrokenBackupAnimeSource {
    required string name = 0 [default = ""];
    required int64 sourceId = 1;
}

// BackupAnimeTracking.kt
message BackupAnimeTracking {
    required int32 syncId = 1;
    required int64 libraryId = 2;
    optional int32 mediaIdInt = 3 [default = 0];
    optional string trackingUrl = 4 [default = ""];
    optional string title = 5 [default = ""];
    optional float lastEpisodeSeen = 6 [default = 0];
    optional int32 totalEpisodes = 7 [default = 0];
    optional float score = 8 [default = 0];
    optional int32 status = 9 [default = 0];
    optional int64 startedWatchingDate = 10 [default = 0];
    optional int64 finishedWatchingDate = 11 [default = 0];
    optional int64 mediaId = 100 [default = 0];
}

// BackupCategory.kt
message BackupAnimeCategory {
  required string name = 1;
  optional int64 order = 2;
  optional int64 flags = 100;
}

// BackupEpisode.kt
message BackupEpisode {
    required string url = 1;
    required string name = 2;
    optional string scanlator = 3;
    optional bool seen = 4 [default = false];
    optional bool bookmark = 5 [default = false];
    optional bool fillermark = 15 [default = false];
    optional int64 lastSecondSeen = 6 [default = 0];
    optional int64 totalSeconds = 16 [default = 0];
    optional int64 dateFetch = 7 [default = 0];
    optional int64 dateUpload = 8 [default = 0];
    optional float episodeNumber = 9 [default = 0];
    optional int64 sourceOrder = 10 [default = 0];
    optional int64 lastModifiedAt = 11 [default = 0];
    optional int64 version = 12 [default = 0];
}

// BackupExtension.kt
message BackupExtension {
    required string pkgName = 1;
    required bytes apk = 2;
}


// BackupExtensionPreferences.kt
message BackupExtensionPreference {
    required string name = 1;
    repeated BackupPreference prefs =2;
}

// BackupPreference.kt
message BackupPreference {
  required string key = 1;
  required PreferenceValue value = 2;
}

message BackupSourcePreference {
    required string sourceKey = 1;
    repeated BackupPreference prefs = 2;
}

message IntPreferenceValue {
  required int32 value = 1;
}

message LongPreferenceValue {
  required int64 value = 1;
}

message FloatPreferenceValue {
  required float value = 1;
}

message StringPreferenceValue {
  required string value = 1;
}

message BooleanPreferenceValue {
  required bool value = 1;
}

message StringSetPreferenceValue {
  repeated string value = 1;
}

// BackupSource.kt
message BackupSource {
  optional string name = 1;
  required int64 sourceId = 2;
}

message BrokenBackupSource {
  optional string name = 0;
  required int64 sourceId = 1;
}
